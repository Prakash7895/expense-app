// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  credit
  debit
}

model User {
  id              String        @id @default(uuid())
  firstName       String?
  lastName        String?
  email           String?       @unique
  countryCode     String?
  phone           String?       @unique
  password        String?
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(3)
  Account         Account[]
  Category        Category[]
  Transaction     Transaction[] @relation("userTransaction")
  RentTransaction Transaction[] @relation("rentTransaction")
  Otp             Otp[]

  relatedUsers  UserRelations[] @relation("invitedUser")
  UserRelations UserRelations[]
}

model Account {
  id          String        @id @default(uuid())
  name        String
  description String?
  userId      String        @default(uuid())
  createdAt   DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(3)
  user        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
}

model Transaction {
  id          String          @id @default(uuid())
  amount      Float
  type        TransactionType
  balance     Float
  categoryId  String          @default(uuid())
  description String?
  userId      String          @default(uuid())
  renterId    String?         @default(uuid())
  accountId   String?         @default(uuid())
  createdAt   DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime        @updatedAt @db.Timestamptz(3)
  user        User            @relation("userTransaction", fields: [userId], references: [id])
  renter      User?           @relation("rentTransaction", fields: [renterId], references: [id])
  account     Account?        @relation(fields: [accountId], references: [id])
  category    Category        @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String          @id @default(uuid())
  name        String
  type        TransactionType
  userId      String?         @default(uuid())
  createdAt   DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime        @updatedAt @db.Timestamptz(3)
  User        User?           @relation(fields: [userId], references: [id])
  Transaction Transaction[]
}

model Otp {
  id        String   @id @default(uuid())
  otp       String
  userId    String   @default(uuid())
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model UserRelations {
  id            String   @id @default(uuid())
  userId        String   @default(uuid())
  User          User     @relation(fields: [userId], references: [id])
  invitedUserId String   @default(uuid())
  InvitedUser   User     @relation("invitedUser", fields: [invitedUserId], references: [id])
  createdAt     DateTime @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime @updatedAt @db.Timestamptz(3)
}
